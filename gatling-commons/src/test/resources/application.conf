

akka {

  actor.provider = "akka.cluster.ClusterActorRefProvider"

  remote.netty.tcp.port=0
  remote.netty.tcp.hostname=127.0.0.1
  remote.netty.tcp.maximum-frame-size=40000000b
  remote.netty.tcp.send-buffer-size=40000000b
  remote.netty.tcp.receive-buffer-size=40000000b

  cluster {
    seed-nodes = [
      "akka.tcp://PerformanceSystem@127.0.0.1:2551"
    ]

    auto-down-unreachable-after = 10s
  }

  jvm-exit-on-fatal-error = false


  persistence {
    journal.plugin = "akka.persistence.leveldb"
    journal.leveldb-shared.store {
      native = on
      dir = "shared-journal"
    }
    snapshot-store.local.dir = "target/snapshots"
    # LevelDB journal plugin.
    leveldb {

      # Class name of the plugin.
      class = "akka.persistence.journal.leveldb.LeveldbJournal"

      # Dispatcher for the plugin actor.
      plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

      # Dispatcher for message replay.
      replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"

      # Storage location of LevelDB files.
      dir = "journal"

      # Use fsync on write
      fsync = on

      # Verify checksum on read.
      checksum = off

      # Native LevelDB (via JNI) or LevelDB Java port
      native = on
    }
    snapshot-store {

      # Path to the snapshot store plugin to be used
      plugin = "akka.persistence.snapshot-store.local"

      # Local filesystem snapshot store plugin.
      local {

        # Class name of the plugin.
        class = "akka.persistence.snapshot.local.LocalSnapshotStore"

        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

        # Dispatcher for streaming snapshot IO.
        stream-dispatcher = "akka.persistence.dispatchers.default-stream-dispatcher"

        # Storage location of snapshot files.
        dir = "snapshots"
      }
    }
  }


}
akka.persistence.journal.leveldb.native = on
akka.extensions = ["akka.cluster.client.ClusterClientReceptionist"]
akka {
  loglevel = "DEBUG"
  actor {
    debug {
      autoreceive = on
      lifecycle = on
    }
  }
}